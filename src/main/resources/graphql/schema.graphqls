type Query {
    getEmployees(pageSize: PageSize!): [Employee]
}

type Mutation {
    createEmployee(employee: CreateEmployeeInput!): Int
    updateEmployee(employee: UpdateEmployeeInput!): Int
    deleteEmployee(employeeId: Int!): Int
}

scalar ZonedDateTime

type Employee {
    employeeId: Int
    firstName: String
    lastName: String
    middleName: String
    birthDate: ZonedDateTime
    hireDate: ZonedDateTime
    gender: String
    maritalStatus: String
    currentPosition: String
    createdOn: ZonedDateTime
    updatedOn: ZonedDateTime
    contacts: [Contact]
    addresses: [Address]
}

type Contact {
    contactId: Int
    contactInfo: String
    isPrimary: Boolean
    createdOn: ZonedDateTime
    updatedOn: ZonedDateTime
}

type Address {
    addressId: Int
    address1: String
    address2: String
    isPrimary: Boolean
    createdOn: ZonedDateTime
    updatedOn: ZonedDateTime
}

input PageSize {
    size: Int
    page: Int
}

input ContactInput {
    contactId: Int
    contactInfo: String
    isPrimary: Boolean
}

input AddressInput {
    addressId: Int
    address1: String
    address2: String
    isPrimary: Boolean
}

input UpdateEmployeeInput {
    employeeId: Int!
    firstName: String
    lastName: String
    middleName: String
    birthDate: ZonedDateTime
    hireDate: ZonedDateTime
    gender: String
    maritalStatus: String
    currentPosition: String
    clearContacts: Boolean
    contacts: [ContactInput]
    clearAddresses: Boolean
    addresses: [AddressInput]
}

input CreateEmployeeInput {
    firstName: String
    lastName: String
    middleName: String
    age: Int
    birthDate: ZonedDateTime
    hireDate: ZonedDateTime
    gender: String
    maritalStatus: String
    currentPosition: String
    contacts: [ContactInput]
    addresses: [AddressInput]
}
